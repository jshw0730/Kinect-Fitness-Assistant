파트마다 적정각이 다르게 때문에 적정각을 강조하기 위해서는 운동마다 draw를 별도로 잡아야함.
->draw는 순수하게 draw를 해야한다. 

draw 파트를 아예 갈아야되는데, 현재 상황에서는 운동에 따라 상황에 따른 색상으로 각을 넣어주느냐, 혹은 각을 넘겨주고 파트에 따라 그려내느냐... 

각과 색상을 같이 넘겨주면서 파트에 따라 그려내는게 나을거같다. 
그러면 운동에 각에 따른 색상 설정 로직을 넣어주고, 이를 draw를 불러서 그려내면 될 것.
이렇게 되면 각에 대한 계산은 외부에서 할 수 밖에 없어진다. 

즉 결과적으로 보면 
void drawMotionInfo(cameraSpacePoint[] filteredJoints){
	calC_angle -> {logic} -> drawPart(angle, color) 
	...
}

와 같은 형태로 가는 것

거리계산도 마찬가지다.

위의 메소드에서 추가적으로 구성해보면
void drawMotionInfo(cameraSpacePoint[] filteredJoints){
	calC_angle -> {logic} -> drawPart(angle, color) 
	calC_distance -> {logic} -> drawPar(distance, color)
}

와 같은 형태로 구성되며, 이 drawMotionInfo는 차후 DisplayTypes.MotionName 로 스위치되어 최종적으로 called 한다.



위와 같은 구현을 하기 위해서는 운동별 적정 값을 알아야 하는 것을 전제로 한다.
때문에 운동에 대한 분석을 해야만 한다.

미리 혼자서 frame을 구성해둔 상태로 운동 분석 후에 로직의 value만 수정하도록 하자.

이렇게 되면 기본모드의 구성은 거의 끝이난다.

-------------------------------------------------------------
이후 기본모드에서 필요로 하는 것은 최근 세션의 운동량이며, 추적자리에서 벗어나면 이를 간단한 창으로 디스플레이하여 알린다. 세션의 종료는 운동하는 주체가 변경하는 순간이며, 운동하는 주체의 판단은 키(height)나 팔, 다리의 길이등 여타 특징을 이용하여 한다. 시간이 남고, 필요할 경우 HD face를 구현해도 좋다.
---------------------------------------------------------------

교육모드에서는 전담 메시지 디스플레이 그리드가 존재하여 운동 자세가 좋지 못한 경우에는 디스플레이 그리드에 어느 부분이 잘못되었는지 디스플레이한다.

이를 위해 운동마다 잘못될 수 있는 경우를 입력해야 한다. ;;